"""
Django settings for LZPlatformBackend project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import datetime
import os
from pathlib import Path

import pymysql
import sentry_sdk
from loguru import logger
from sentry_sdk.integrations.django import DjangoIntegration

# import djcelery

# celery
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = False
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # 代理人
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'  # 结果存储地址为redis
CELERY_RESULT_BACKEND = 'django-db'  # 结果存储地址为db
CELERY_ACCEPT_CONTENT = ['application/json']  # 指定任务接收的内容序列化类型
CELERY_TASK_SERIALIZER = 'json'  # 任务序列化方式
CELERY_RESULT_SERIALIZER = 'json'  # 任务结果序列化方式
CELERYD_PREFETCH_MULTIPLIER = 2  # celery worker 每次去redis取任务的数量
CELERYD_MAX_TASKS_PER_CHILD = 40  # 每个worker执行了多少任务就会死掉
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
DJANGO_CELERY_RESULTS_TASK_ID_MAX_LENGTH = 191
DJANGO_CELERY_RESULTS = {
    'ALLOW_EDITS': False
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sy6-n^$lz_v6g%$tp5v+#z6!(@_%xmpq6v2^fnab1fmse%ndqh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', 'http://localhost:8080']

# Application definition


INSTALLED_APPS = [
    # 'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_celery_results',
    'django_celery_beat',
    'rest_framework',
    'django_filters',
    'apps.project',
    'apps.user',
    'apps.case',
    'apps.task',
]

MIDDLEWARE = [
    # 'LZPlatformBackend.core.middlewares.LoggerMiddleware',
    # 'LZPlatformBackend.core.middlewares.SentryMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'LZPlatformBackend.core.middlewares.CollectionMiddleware',
]

ROOT_URLCONF = 'LZPlatformBackend.urls'


# 跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with'
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LZPlatformBackend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'LZPlatform',
        'USER': 'root',
        'PASSWORD': '19930808',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# user
# AUTH_USER_MODEL = "user.UserInfo"


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
"""
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.user.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.user.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.user.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.user.password_validation.NumericPasswordValidator',
    },
]
"""
# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('LZPlatformBackend.core.authentication.JWTAuthentication',),
    # 'EXCEPTION_HANDLER': 'LZPlatformBackend.core.handler.custom_exception_handler',
    'DEFAULT_THROTTLE_CLASSES': ('LZPlatformBackend.core.throttles.VerifyCodeThrottle', 'LZPlatformBackend.core.throttles.GlobalThrottle'),
    'DEFAULT_THROTTLE_RATES': {
        'global': '10000/m',
        'verify_code': '10000/m'
    },
    'DEFAULT_PAGINATION_CLASS': 'LZPlatformBackend.core.pagination.DefaultPageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}

# jwt token settings
JWT = {
    'KEY': SECRET_KEY,
    'ALGORITHM': 'HS256',
    'EXP_TIMEDELTA': {
        'hours': 6,
        'days': 1,
        'years': 100
    },
    'SUBJECT': 'LZPlatformBackend',
}

TEMP_DIR = os.path.join(BASE_DIR, '.temp')

LOG_DIR = BASE_DIR / 'log'
LOG_FILE = LOG_DIR / '{time:YYYY-MM-DD}.log'
LOGGER = logger
LOGGER.add(LOG_FILE, level='DEBUG', enqueue=True, encoding='utf-8', backtrace=True, diagnose=True, )

sentry_sdk.init(
    dsn="https://d2c5437cb3cd428aba144cba0299509d@o507906.ingest.sentry.io/5599655",
    integrations=[DjangoIntegration()],

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    traces_sample_rate=1,  # 采样率
    send_default_pii=True,  # 用户认证信息采集
    environment='production'
)

MENU_TIER_MAX = 3

try:
    from .local_settings import *
except ImportError:
    pass
